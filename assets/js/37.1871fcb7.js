(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{333:function(s,t,a){"use strict";a.r(t);var n=a(4),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"_17-i-o-函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_17-i-o-函数"}},[s._v("#")]),s._v(" 17.I/O 函数")]),s._v(" "),t("blockquote",[t("p",[s._v("作者："),t("a",{attrs:{href:"https://wangdoc.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("来自网道项目"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("本站地址："),t("a",{attrs:{href:"http://springsongs.cn",target:"_blank",rel:"noopener noreferrer"}},[s._v("http://springsongs.cn"),t("OutboundLink")],1),s._v("\nC 语言提供了一些函数，用于与外部设备通信，称为输入输出函数，简称 I/O 函数。输入（import）指的是获取外部数据，输出（export）指的是向外部传递数据。")])]),s._v(" "),t("h2",{attrs:{id:"缓存和字节流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存和字节流"}},[s._v("#")]),s._v(" 缓存和字节流")]),s._v(" "),t("p",[s._v("严格地说，输入输出函数并不是直接与外部设备通信，而是通过缓存（buffer）进行间接通信。这个小节介绍缓存是什么。")]),s._v(" "),t("p",[s._v("普通文件一般都保存在磁盘上面，跟 CPU 相比，磁盘读取或写入数据是一个很慢的操作。所以，程序直接读写磁盘是不可行的，可能每执行一行命令，都必须等半天。C 语言的解决方案，就是只要打开一个文件，就在内存里面为这个文件设置一个缓存区。")]),s._v(" "),t("p",[s._v("程序向文件写入数据时，程序先把数据放入缓存，等到缓存满了，再把里面的数据会一次性写入磁盘文件。这时，缓存区就空了，程序再把新的数据放入缓存，重复整个过程。")]),s._v(" "),t("p",[s._v("程序从文件读取数据时，文件先把一部分数据放到缓存里面，然后程序从缓存获取数据，等到缓存空了，磁盘文件再把新的数据放入缓存，重复整个过程。")]),s._v(" "),t("p",[s._v("内存的读写速度比磁盘快得多，缓存的设计减少了读写磁盘的次数，大大提高了程序的执行效率。另外，一次性移动大块数据，要比多次移动小块数据快得多。")]),s._v(" "),t("p",[s._v("这种读写模式，对于程序来说，就有点像水流（stream），不是一次性读取或写入所有数据，而是一个持续不断的过程。先操作一部分数据，等到缓存吞吐完这部分数据，再操作下一部分数据。这个过程就叫做字节流操作。")]),s._v(" "),t("p",[s._v("由于缓存读完就空了，所以字节流读取都是只能读一次，第二次就读不到了。这跟读取文件很不一样。")]),s._v(" "),t("p",[s._v("C 语言的输入输出函数，凡是涉及读写文件，都是属于字节流操作。输入函数从文件获取数据，操作的是输入流；输出函数向文件写入数据，操作的是输出流。")]),s._v(" "),t("h2",{attrs:{id:"printf"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#printf"}},[s._v("#")]),s._v(" printf()")]),s._v(" "),t("p",[t("code",[s._v("printf()")]),s._v("是最常用的输出函数，用于屏幕输出，原型定义在头文件"),t("code",[s._v("stdio.h")]),s._v("，详见《基本语法》一章。")]),s._v(" "),t("h2",{attrs:{id:"scanf"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scanf"}},[s._v("#")]),s._v(" scanf()")]),s._v(" "),t("h3",{attrs:{id:"基本用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本用法"}},[s._v("#")]),s._v(" 基本用法")]),s._v(" "),t("p",[t("code",[s._v("scanf()")]),s._v("函数用于读取用户的键盘输入。程序运行到这个语句时，会停下来，等待用户从键盘输入。用户输入数据、按下回车键后，"),t("code",[s._v("scanf()")]),s._v("就会处理用户的输入，将其存入变量。它的原型定义在头文件"),t("code",[s._v("stdio.h")]),s._v("。")]),s._v(" "),t("p",[t("code",[s._v("scanf()")]),s._v("的语法跟"),t("code",[s._v("printf()")]),s._v("类似。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("scanf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%d"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("它的第一个参数是一个格式字符串，里面会放置占位符（与"),t("code",[s._v("printf()")]),s._v("的占位符基本一致），告诉编译器如何解读用户的输入，需要提取的数据是什么类型。这是因为 C 语言的数据都是有类型的，"),t("code",[s._v("scanf()")]),s._v("必须提前知道用户输入的数据类型，才能处理数据。它的其余参数就是存放用户输入的变量，格式字符串里面有多少个占位符，就有多少个变量。")]),s._v(" "),t("p",[s._v("上面示例中，"),t("code",[s._v("scanf()")]),s._v("的第一个参数"),t("code",[s._v("%d")]),s._v("，表示用户输入的应该是一个整数。"),t("code",[s._v("%d")]),s._v("就是一个占位符，"),t("code",[s._v("%")]),s._v("是占位符的标志，"),t("code",[s._v("d")]),s._v("表示整数。第二个参数"),t("code",[s._v("&i")]),s._v("表示，将用户从键盘输入的整数存入变量"),t("code",[s._v("i")]),s._v("。")]),s._v(" "),t("p",[s._v("注意，变量前面必须加上"),t("code",[s._v("&")]),s._v("运算符（指针变量除外），因为"),t("code",[s._v("scanf()")]),s._v("传递的不是值，而是地址，即将变量"),t("code",[s._v("i")]),s._v("的地址指向用户输入的值。如果这里的变量是指针变量（比如字符串变量），那就不用加"),t("code",[s._v("&")]),s._v("运算符。")]),s._v(" "),t("p",[s._v("下面是一次将键盘输入读入多个变量的例子。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("scanf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%d%d%f%f"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("j"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("上面示例中，格式字符串"),t("code",[s._v("%d%d%f%f")]),s._v("，表示用户输入的前两个是整数，后两个是浮点数，比如"),t("code",[s._v("1 -20 3.4 -4.0e3")]),s._v("。这四个值依次放入"),t("code",[s._v("i")]),s._v("、"),t("code",[s._v("j")]),s._v("、"),t("code",[s._v("x")]),s._v("、"),t("code",[s._v("y")]),s._v("四个变量。")]),s._v(" "),t("p",[t("code",[s._v("scanf()")]),s._v("处理数值占位符时，会自动过滤空白字符，包括空格、制表符、换行符等。所以，用户输入的数据之间，有一个或多个空格不影响"),t("code",[s._v("scanf()")]),s._v("解读数据。另外，用户使用回车键，将输入分成几行，也不影响解读。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.4")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.0e3")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("上面示例中，用户分成四行输入，得到的结果与一行输入是完全一样的。每次按下回车键以后，"),t("code",[s._v("scanf()")]),s._v("就会开始解读，如果第一行匹配第一个占位符，那么下次按下回车键时，就会从第二个占位符开始解读。")]),s._v(" "),t("p",[t("code",[s._v("scanf()")]),s._v("处理用户输入的原理是，用户的输入先放入缓存，等到按下回车键后，按照占位符对缓存进行解读。解读用户输入时，会从上一次解读遗留的第一个字符开始，直到读完缓存，或者遇到第一个不符合条件的字符为止。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("float")]),s._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// 用户输入 "    -13.45e12# 0"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("scanf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%d"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("scanf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%f"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("上面示例中，"),t("code",[s._v("scanf()")]),s._v("读取用户输入时，"),t("code",[s._v("%d")]),s._v("占位符会忽略起首的空格，从"),t("code",[s._v("-")]),s._v("处开始获取数据，读取到"),t("code",[s._v("-13")]),s._v("停下来，因为后面的"),t("code",[s._v(".")]),s._v("不属于整数的有效字符。这就是说，占位符"),t("code",[s._v("%d")]),s._v("会读到"),t("code",[s._v("-13")]),s._v("。")]),s._v(" "),t("p",[s._v("第二次调用"),t("code",[s._v("scanf()")]),s._v("时，就会从上一次停止解读的地方，继续往下读取。这一次读取的首字符是"),t("code",[s._v(".")]),s._v("，由于对应的占位符是"),t("code",[s._v("%f")]),s._v("，会读取到"),t("code",[s._v(".45e12")]),s._v("，这是采用科学计数法的浮点数格式。后面的"),t("code",[s._v("#")]),s._v("不属于浮点数的有效字符，所以会停在这里。")]),s._v(" "),t("p",[s._v("由于"),t("code",[s._v("scanf()")]),s._v("可以连续处理多个占位符，所以上面的例子也可以写成下面这样。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("scanf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%d%f"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("code",[s._v("scanf()")]),s._v("的返回值是一个整数，表示成功读取的变量个数。如果没有读取任何项，或者匹配失败，则返回"),t("code",[s._v("0")]),s._v("。如果读取到文件结尾，则返回常量 EOF。")]),s._v(" "),t("h3",{attrs:{id:"占位符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#占位符"}},[s._v("#")]),s._v(" 占位符")]),s._v(" "),t("p",[t("code",[s._v("scanf()")]),s._v("常用的占位符如下，与"),t("code",[s._v("printf()")]),s._v("的占位符基本一致。")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("%c")]),s._v("：字符。")]),s._v(" "),t("li",[t("code",[s._v("%d")]),s._v("：整数。")]),s._v(" "),t("li",[t("code",[s._v("%f")]),s._v("："),t("code",[s._v("float")]),s._v("类型浮点数。")]),s._v(" "),t("li",[t("code",[s._v("%lf")]),s._v("："),t("code",[s._v("double")]),s._v("类型浮点数。")]),s._v(" "),t("li",[t("code",[s._v("%Lf")]),s._v("："),t("code",[s._v("long double")]),s._v("类型浮点数。")]),s._v(" "),t("li",[t("code",[s._v("%s")]),s._v("：字符串。")]),s._v(" "),t("li",[t("code",[s._v("%[]")]),s._v("：在方括号中指定一组匹配的字符（比如"),t("code",[s._v("%[0-9]")]),s._v("），遇到不在集合之中的字符，匹配将会停止。")])]),s._v(" "),t("p",[s._v("上面所有占位符之中，除了"),t("code",[s._v("%c")]),s._v("以外，都会自动忽略起首的空白字符。"),t("code",[s._v("%c")]),s._v("不忽略空白字符，总是返回当前第一个字符，无论该字符是否为空格。如果要强制跳过字符前的空白字符，可以写成"),t("code",[s._v('scanf(" %c", &ch)')]),s._v("，即"),t("code",[s._v("%c")]),s._v("前加上一个空格，表示跳过零个或多个空白字符。")]),s._v(" "),t("p",[s._v("下面要特别说一下占位符"),t("code",[s._v("%s")]),s._v("，它其实不能简单地等同于字符串。它的规则是，从当前第一个非空白字符开始读起，直到遇到空白字符（即空格、换行符、制表符等）为止。因为"),t("code",[s._v("%s")]),s._v("不会包含空白字符，所以无法用来读取多个单词，除非多个"),t("code",[s._v("%s")]),s._v("一起使用。这也意味着，"),t("code",[s._v("scanf()")]),s._v("不适合读取可能包含空格的字符串，比如书名或歌曲名。另外，"),t("code",[s._v("scanf()")]),s._v("遇到"),t("code",[s._v("%s")]),s._v("占位符，会在字符串变量末尾存储一个空字符"),t("code",[s._v("\\0")]),s._v("。")]),s._v(" "),t("p",[t("code",[s._v("scanf()")]),s._v("将字符串读入字符数组时，不会检测字符串是否超过了数组长度。所以，储存字符串时，很可能会超过数组的边界，导致预想不到的结果。为了防止这种情况，使用"),t("code",[s._v("%s")]),s._v("占位符时，应该指定读入字符串的最长长度，即写成"),t("code",[s._v("%[m]s")]),s._v("，其中的"),t("code",[s._v("[m]")]),s._v("是一个整数，表示读取字符串的最大长度，后面的字符将被丢弃。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("scanf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%10s"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("上面示例中，"),t("code",[s._v("name")]),s._v("是一个长度为11的字符数组，"),t("code",[s._v("scanf()")]),s._v("的占位符"),t("code",[s._v("%10s")]),s._v("表示最多读取用户输入的10个字符，后面的字符将被丢弃，这样就不会有数组溢出的风险了。")]),s._v(" "),t("h3",{attrs:{id:"赋值忽略符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#赋值忽略符"}},[s._v("#")]),s._v(" 赋值忽略符")]),s._v(" "),t("p",[s._v("有时，用户的输入可能不符合预定的格式。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("scanf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%d-%d-%d"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("year"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("month"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("day"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("上面示例中，如果用户输入"),t("code",[s._v("2020-01-01")]),s._v("，就会正确解读出年、月、日。问题是用户可能输入其他格式，比如"),t("code",[s._v("2020/01/01")]),s._v("，这种情况下，"),t("code",[s._v("scanf()")]),s._v("解析数据就会失败。")]),s._v(" "),t("p",[s._v("为了避免这种情况，"),t("code",[s._v("scanf()")]),s._v("提供了一个赋值忽略符（assignment suppression character）"),t("code",[s._v("*")]),s._v("。只要把"),t("code",[s._v("*")]),s._v("加在任何占位符的百分号后面，该占位符就不会返回值，解析后将被丢弃。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("scanf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%d%*c%d%*c%d"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("year"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("month"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("day"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("上面示例中，"),t("code",[s._v("%*c")]),s._v("就是在占位符的百分号后面，加入了赋值忽略符"),t("code",[s._v("*")]),s._v("，表示这个占位符没有对应的变量，解读后不必返回。")]),s._v(" "),t("h2",{attrs:{id:"sscanf"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sscanf"}},[s._v("#")]),s._v(" sscanf()")]),s._v(" "),t("p",[t("code",[s._v("sscanf()")]),s._v("函数与"),t("code",[s._v("scanf()")]),s._v("很类似，不同之处是"),t("code",[s._v("sscanf()")]),s._v("从字符串里面，而不是从用户输入获取数据。它的原型定义在头文件"),t("code",[s._v("stdio.h")]),s._v("里面。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sscanf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" format"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("code",[s._v("sscanf()")]),s._v("的第一个参数是一个字符串指针，用来从其中获取数据。其他参数都与"),t("code",[s._v("scanf()")]),s._v("相同。")]),s._v(" "),t("p",[t("code",[s._v("sscanf()")]),s._v("主要用来处理其他输入函数读入的字符串，从其中提取数据。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fgets")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("sizeof")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("stdin")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sscanf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%d%d"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("j"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("上面示例中，"),t("code",[s._v("fgets()")]),s._v("先从标准输入获取了一行数据（"),t("code",[s._v("fgets()")]),s._v("的介绍详见下一章），存入字符数组"),t("code",[s._v("str")]),s._v("。然后，"),t("code",[s._v("sscanf()")]),s._v("再从字符串"),t("code",[s._v("str")]),s._v("里面提取两个整数，放入变量"),t("code",[s._v("i")]),s._v("和"),t("code",[s._v("j")]),s._v("。")]),s._v(" "),t("p",[t("code",[s._v("sscanf()")]),s._v("的一个好处是，它的数据来源不是流数据，所以可以反复使用，不像"),t("code",[s._v("scanf()")]),s._v("的数据来源是流数据，只能读取一次。")]),s._v(" "),t("p",[t("code",[s._v("sscanf()")]),s._v("的返回值是成功赋值的变量的数量，如果提取失败，返回常量 EOF。")]),s._v(" "),t("h2",{attrs:{id:"getchar-putchar"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#getchar-putchar"}},[s._v("#")]),s._v(" getchar()，putchar()")]),s._v(" "),t("p",[t("strong",[s._v("（1）getchar()")])]),s._v(" "),t("p",[t("code",[s._v("getchar()")]),s._v("函数返回用户从键盘输入的一个字符，使用时不带有任何参数。程序运行到这个命令就会暂停，等待用户从键盘输入，等同于使用"),t("code",[s._v("scanf()")]),s._v("方法读取一个字符。它的原型定义在头文件"),t("code",[s._v("stdio.h")]),s._v("。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" ch"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nch "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getchar")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等同于")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("scanf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%c"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("ch"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[t("code",[s._v("getchar()")]),s._v("不会忽略起首的空白字符，总是返回当前读取的第一个字符，无论是否为空格。如果读取失败，返回常量 EOF，由于 EOF 通常是"),t("code",[s._v("-1")]),s._v("，所以返回值的类型要设为 int，而不是 char。")]),s._v(" "),t("p",[s._v("由于"),t("code",[s._v("getchar()")]),s._v("返回读取的字符，所以可以用在循环条件之中。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getchar")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token char"}},[s._v("'\\n'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("上面示例中，只有读到的字符等于换行符（"),t("code",[s._v("\\n")]),s._v("），才会退出循环，常用来跳过某行。"),t("code",[s._v("while")]),s._v("循环的循环体没有任何语句，表示对该行不执行任何操作。")]),s._v(" "),t("p",[s._v("下面的例子是计算某一行的字符长度。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" len "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getchar")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token char"}},[s._v("'\\n'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  len"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("上面示例中，"),t("code",[s._v("getchar()")]),s._v("每读取一个字符，长度变量"),t("code",[s._v("len")]),s._v("就会加1，直到读取到换行符为止，这时"),t("code",[s._v("len")]),s._v("就是该行的字符长度。")]),s._v(" "),t("p",[s._v("下面的例子是跳过空格字符。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ch "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getchar")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token char"}},[s._v("' '")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("上面示例中，结束循环后，变量"),t("code",[s._v("ch")]),s._v("等于第一个非空格字符。")]),s._v(" "),t("p",[t("strong",[s._v("（2）putchar()")])]),s._v(" "),t("p",[t("code",[s._v("putchar()")]),s._v("函数将它的参数字符输出到屏幕，等同于使用"),t("code",[s._v("printf()")]),s._v("输出一个字符。它的原型定义在头文件"),t("code",[s._v("stdio.h")]),s._v("。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("putchar")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ch"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等同于")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%c"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ch"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("操作成功时，"),t("code",[s._v("putchar()")]),s._v("返回输出的字符，否则返回常量 EOF。")]),s._v(" "),t("p",[t("strong",[s._v("（3）小结")])]),s._v(" "),t("p",[s._v("由于"),t("code",[s._v("getchar()")]),s._v("和"),t("code",[s._v("putchar()")]),s._v("这两个函数的用法，要比"),t("code",[s._v("scanf()")]),s._v("和"),t("code",[s._v("printf()")]),s._v("更简单，而且通常是用宏来实现，所以要比"),t("code",[s._v("scanf()")]),s._v("和"),t("code",[s._v("printf()")]),s._v("更快。如果操作单个字符，建议优先使用这两个函数。")]),s._v(" "),t("h2",{attrs:{id:"puts"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#puts"}},[s._v("#")]),s._v(" puts()")]),s._v(" "),t("p",[t("code",[s._v("puts()")]),s._v("函数用于将参数字符串显示在屏幕（stdout）上，并且自动在字符串末尾添加换行符。它的原型定义在头文件"),t("code",[s._v("stdio.h")]),s._v("。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("puts")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Here are some messages:"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("puts")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello World"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("上面示例中，"),t("code",[s._v("puts()")]),s._v("在屏幕上输出两行内容。")]),s._v(" "),t("p",[s._v("写入成功时，"),t("code",[s._v("puts()")]),s._v("返回一个非负整数，否则返回常量 EOF。")]),s._v(" "),t("h2",{attrs:{id:"gets"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gets"}},[s._v("#")]),s._v(" gets()")]),s._v(" "),t("p",[t("code",[s._v("gets()")]),s._v("函数以前用于从"),t("code",[s._v("stdin")]),s._v("读取整行输入，现在已经被废除了，仍然放在这里介绍一下。")]),s._v(" "),t("p",[s._v("该函数读取用户的一行输入，不会跳过起始处的空白字符，直到遇到换行符为止。这个函数会丢弃换行符，将其余字符放入参数变量，并在这些字符的末尾添加一个空字符"),t("code",[s._v("\\0")]),s._v("，使其成为一个字符串。")]),s._v(" "),t("p",[s._v("它经常与"),t("code",[s._v("puts()")]),s._v("配合使用。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" words"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("81")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("puts")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Enter a string, please"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("gets")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("words"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("上面示例使用"),t("code",[s._v("puts()")]),s._v("在屏幕上输出提示，然后使用"),t("code",[s._v("gets()")]),s._v("获取用户的输入。")]),s._v(" "),t("p",[s._v("由于"),t("code",[s._v("gets()")]),s._v("获取的字符串，可能超过字符数组变量的最大长度，有安全风险，建议不要使用，改为使用"),t("code",[s._v("fgets()")]),s._v("。")])])}),[],!1,null,null,null);t.default=e.exports}}]);