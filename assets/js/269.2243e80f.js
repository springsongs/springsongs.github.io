(window.webpackJsonp=window.webpackJsonp||[]).push([[269],{563:function(e,v,_){"use strict";_.r(v);var s=_(4),t=Object(s.a)({},(function(){var e=this,v=e._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"tsc-命令行编译器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tsc-命令行编译器"}},[e._v("#")]),e._v(" tsc 命令行编译器")]),e._v(" "),v("blockquote",[v("p",[e._v("作者："),v("a",{attrs:{href:"https://wangdoc.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("来自网道项目"),v("OutboundLink")],1)]),e._v(" "),v("p",[e._v("本站地址："),v("a",{attrs:{href:"http://springsongs.cn",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://springsongs.cn"),v("OutboundLink")],1)])]),e._v(" "),v("h2",{attrs:{id:"简介"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[e._v("#")]),e._v(" 简介")]),e._v(" "),v("p",[e._v("tsc 是 TypeScript 官方的命令行编译器，用来检查代码，并将其编译成 JavaScript 代码。")]),e._v(" "),v("p",[e._v("tsc 默认使用当前目录下的配置文件"),v("code",[e._v("tsconfig.json")]),e._v("，但也可以接受独立的命令行参数。命令行参数会覆盖"),v("code",[e._v("tsconfig.json")]),e._v("，比如命令行指定了所要编译的文件，那么 tsc 就会忽略"),v("code",[e._v("tsconfig.json")]),e._v("的"),v("code",[e._v("files")]),e._v("属性。")]),e._v(" "),v("p",[e._v("tsc 的基本用法如下。")]),e._v(" "),v("div",{staticClass:"language-bash line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-bash"}},[v("code",[v("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 使用 tsconfig.json 的配置")]),e._v("\n$ tsc\n\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 只编译 index.ts")]),e._v("\n$ tsc index.ts\n\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 编译 src 目录的所有 .ts 文件")]),e._v("\n$ tsc src/*.ts\n\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 指定编译配置文件")]),e._v("\n$ tsc "),v("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--project")]),e._v(" tsconfig.production.json\n\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 只生成类型声明文件，不编译出 JS 文件")]),e._v("\n$ tsc index.js "),v("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--declaration")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--emitDeclarationOnly")]),e._v("\n\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 多个 TS 文件编译成单个 JS 文件")]),e._v("\n$ tsc app.ts util.ts "),v("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--target")]),e._v(" esnext "),v("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--outfile")]),e._v(" index.js\n")])]),e._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[e._v("1")]),v("br"),v("span",{staticClass:"line-number"},[e._v("2")]),v("br"),v("span",{staticClass:"line-number"},[e._v("3")]),v("br"),v("span",{staticClass:"line-number"},[e._v("4")]),v("br"),v("span",{staticClass:"line-number"},[e._v("5")]),v("br"),v("span",{staticClass:"line-number"},[e._v("6")]),v("br"),v("span",{staticClass:"line-number"},[e._v("7")]),v("br"),v("span",{staticClass:"line-number"},[e._v("8")]),v("br"),v("span",{staticClass:"line-number"},[e._v("9")]),v("br"),v("span",{staticClass:"line-number"},[e._v("10")]),v("br"),v("span",{staticClass:"line-number"},[e._v("11")]),v("br"),v("span",{staticClass:"line-number"},[e._v("12")]),v("br"),v("span",{staticClass:"line-number"},[e._v("13")]),v("br"),v("span",{staticClass:"line-number"},[e._v("14")]),v("br"),v("span",{staticClass:"line-number"},[e._v("15")]),v("br"),v("span",{staticClass:"line-number"},[e._v("16")]),v("br"),v("span",{staticClass:"line-number"},[e._v("17")]),v("br")])]),v("h2",{attrs:{id:"命令行参数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#命令行参数"}},[e._v("#")]),e._v(" 命令行参数")]),e._v(" "),v("p",[e._v("tsc 的命令行参数，大部分与 tsconfig.json 的属性一一对应。")]),e._v(" "),v("p",[e._v("下面只是按照首字母排序，简单罗列出主要的一些参数，详细解释可以参考《tsconfig.json 配置文件》一章。")]),e._v(" "),v("p",[v("code",[e._v("--all")]),e._v("：输出所有可用的参数。")]),e._v(" "),v("p",[v("code",[e._v("--allowJs")]),e._v("：允许 TS 脚本加载 JS 模块，编译时将 JS 一起拷贝到输出目录。")]),e._v(" "),v("p",[v("code",[e._v("--allowUnreachableCode")]),e._v("：如果 TS 脚本有不可能运行到的代码，不报错。")]),e._v(" "),v("p",[v("code",[e._v("--allowUnusedLabels")]),e._v("：如果 TS 脚本有没有用到的标签，不报错。")]),e._v(" "),v("p",[v("code",[e._v("--alwaysStrict")]),e._v("：总是在编译产物的头部添加"),v("code",[e._v("use strict")]),e._v("。")]),e._v(" "),v("p",[v("code",[e._v("--baseUrl")]),e._v("：指定非相对位置的模块定位的基准 URL。")]),e._v(" "),v("p",[v("code",[e._v("--build")]),e._v("：启用增量编译。")]),e._v(" "),v("p",[v("code",[e._v("--checkJs")]),e._v("：对 JS 脚本进行类型检查。")]),e._v(" "),v("p",[v("code",[e._v("--declaration")]),e._v("：为 TS 脚本生成一个类型生成文件。")]),e._v(" "),v("p",[v("code",[e._v("--declarationDir")]),e._v("：指定生成的类型声明文件的所在目录。")]),e._v(" "),v("p",[v("code",[e._v("--declarationMap")]),e._v("：为"),v("code",[e._v(".d.ts")]),e._v("文件生成 SourceMap 文件。")]),e._v(" "),v("p",[v("code",[e._v("--diagnostics")]),e._v("：构建后输出编译性能信息。")]),e._v(" "),v("p",[v("code",[e._v("--emitBOM")]),e._v("：在编译输出的 UTF-8 文件头部加上 BOM 标志。")]),e._v(" "),v("p",[v("code",[e._v("--emitDeclarationOnly")]),e._v("：只编译输出类型声明文件，不输出 JS 文件。")]),e._v(" "),v("p",[v("code",[e._v("--esModuleInterop")]),e._v("：更容易使用 import 命令加载 CommonJS 模块。")]),e._v(" "),v("p",[v("code",[e._v("--exactOptionalPropertyTypes")]),e._v("：不允许将可选属性设置为"),v("code",[e._v("undefined")]),e._v("。")]),e._v(" "),v("p",[v("code",[e._v("--experimentalDecorators")]),e._v("：支持早期的装饰器语法。")]),e._v(" "),v("p",[v("code",[e._v("--explainFiles")]),e._v("：输出进行编译的文件信息。")]),e._v(" "),v("p",[v("code",[e._v("--forceConsistentCasingInFileNames")]),e._v("：文件名大小写敏感，默认打开。")]),e._v(" "),v("p",[v("code",[e._v("--help")]),e._v("：输出帮助信息。")]),e._v(" "),v("p",[v("code",[e._v("--importHelpers")]),e._v("：从外部库（比如 tslib）输入辅助函数。")]),e._v(" "),v("p",[v("code",[e._v("--incremental")]),e._v("：启用增量构建。")]),e._v(" "),v("p",[v("code",[e._v("--init")]),e._v("：在当前目录创建一个全新的"),v("code",[e._v("tsconfig.json")]),e._v("文件，里面是预设的设置。")]),e._v(" "),v("p",[v("code",[e._v("--inlineSourceMap")]),e._v("：SourceMap 信息嵌入 JS 文件，而不是生成独立的"),v("code",[e._v(".js.map")]),e._v("文件。")]),e._v(" "),v("p",[v("code",[e._v("--inlineSources")]),e._v("：将 TypeScript 源码作为 SourceMap 嵌入编译出来的 JS 文件。")]),e._v(" "),v("p",[v("code",[e._v("--isolatedModules")]),e._v("：确保每个模块能够独立编译，不依赖其他输入的模块。")]),e._v(" "),v("p",[v("code",[e._v("--jsx")]),e._v("：设置如何处理 JSX 文件。")]),e._v(" "),v("p",[v("code",[e._v("--lib")]),e._v("：设置目标环境需要哪些内置库的类型描述。")]),e._v(" "),v("p",[v("code",[e._v("--listEmittedFiles")]),e._v("：编译后输出编译产物的文件名。")]),e._v(" "),v("p",[v("code",[e._v("--listFiles")]),e._v("：编译过程中，列出读取的文件名。")]),e._v(" "),v("p",[v("code",[e._v("--listFilesOnly")]),e._v("：列出编译所要处理的文件，然后停止编译。")]),e._v(" "),v("p",[v("code",[e._v("--locale")]),e._v("：指定编译时输出的语言，不影响编译结果。")]),e._v(" "),v("p",[v("code",[e._v("--mapRoot")]),e._v("：指定 SourceMap 文件的位置。")]),e._v(" "),v("p",[v("code",[e._v("--module")]),e._v("：指定编译生成的模块格式。")]),e._v(" "),v("p",[v("code",[e._v("--moduleResolution")]),e._v("：指定如何根据模块名找到模块的位置。")]),e._v(" "),v("p",[v("code",[e._v("--moduleSuffixes")]),e._v("：指定模块文件的后缀名。")]),e._v(" "),v("p",[v("code",[e._v("--newLine")]),e._v("：指定编译产物的换行符，可以设为"),v("code",[e._v("crlf")]),e._v("或者"),v("code",[e._v("lf")]),e._v("。")]),e._v(" "),v("p",[v("code",[e._v("--noEmit")]),e._v("：不生成编译产物，只进行类型检查。")]),e._v(" "),v("p",[v("code",[e._v("--noEmitHelpers")]),e._v("：不在编译产物中加入辅助函数。")]),e._v(" "),v("p",[v("code",[e._v("--noEmitOnError")]),e._v("：一旦报错，就停止编译，没有编译产物。")]),e._v(" "),v("p",[v("code",[e._v("--noFallthroughCasesInSwitch")]),e._v("：Switch 结构的"),v("code",[e._v("case")]),e._v("分支必须有终止语句（比如"),v("code",[e._v("break")]),e._v("）。")]),e._v(" "),v("p",[v("code",[e._v("--noImplicitAny")]),e._v("：类型推断只要为"),v("code",[e._v("any")]),e._v("类型就报错。")]),e._v(" "),v("p",[v("code",[e._v("--noImplicitReturns")]),e._v("：函数内部没有显式返回语句（比如"),v("code",[e._v("return")]),e._v("）就报错。")]),e._v(" "),v("p",[v("code",[e._v("--noImplicitThis")]),e._v("：如果"),v("code",[e._v("this")]),e._v("关键字是"),v("code",[e._v("any")]),e._v("类型，就报错。")]),e._v(" "),v("p",[v("code",[e._v("--noImplicitUseStrict")]),e._v("：编译产生的 JS 文件头部不添加"),v("code",[e._v("use strict")]),e._v("语句。")]),e._v(" "),v("p",[v("code",[e._v("--noResolve")]),e._v("：不进行模块定位，除非该模块是由命令行传入。")]),e._v(" "),v("p",[v("code",[e._v("--noUnusedLocals")]),e._v("：如果有未使用的局部变量就报错。")]),e._v(" "),v("p",[v("code",[e._v("--noUnusedParameters")]),e._v("：如果有未使用的函数参数就报错。")]),e._v(" "),v("p",[v("code",[e._v("--outDir")]),e._v("：指定编译产物的存放目录。")]),e._v(" "),v("p",[v("code",[e._v("--outFile")]),e._v("：所有编译产物打包成一个指定文件。")]),e._v(" "),v("p",[v("code",[e._v("--preserveConstEnums")]),e._v("：不将"),v("code",[e._v("const enum")]),e._v("结构在生成的代码中，替换成常量。")]),e._v(" "),v("p",[v("code",[e._v("--preserveWatchOutput")]),e._v("： watch 模式下不清屏。")]),e._v(" "),v("p",[v("code",[e._v("--pretty")]),e._v("：美化显示编译时的终端输出。这是默认值，但是可以关闭"),v("code",[e._v("--pretty false")]),e._v("。")]),e._v(" "),v("p",[v("code",[e._v("--project")]),e._v("（或者"),v("code",[e._v("-p")]),e._v("）：指定编译配置文件，或者该文件所在的目录。")]),e._v(" "),v("p",[v("code",[e._v("--removeComments")]),e._v("：编译结果中移除代码注释。")]),e._v(" "),v("p",[v("code",[e._v("--resolveJsonModule")]),e._v("：允许加载 JSON 文件。")]),e._v(" "),v("p",[v("code",[e._v("--rootDir")]),e._v("：指定加载文件所在的根目录，该目录里面的目录结构会被复制到输出目录。")]),e._v(" "),v("p",[v("code",[e._v("--rootDirs")]),e._v("：允许模块定位时，多个目录被当成一个虚拟目录。")]),e._v(" "),v("p",[v("code",[e._v("--skipDefaultLibCheck")]),e._v("：跳过 TypeScript 内置类型声明文件的类型检查。")]),e._v(" "),v("p",[v("code",[e._v("--skipLibCheck")]),e._v("：跳过"),v("code",[e._v(".d.ts")]),e._v("类型声明文件的类型检查。这样可以加快编译速度。")]),e._v(" "),v("p",[v("code",[e._v("--showConfig")]),e._v("：终端输出编译配置信息，而不进行配置。")]),e._v(" "),v("p",[v("code",[e._v("--sourcemap")]),e._v("：为编译产生的 JS 文件生成 SourceMap 文件（.map 文件）。")]),e._v(" "),v("p",[v("code",[e._v("--sourceRoot")]),e._v("：指定 SourceMap 文件里面的 TypeScript 源码根目录位置。")]),e._v(" "),v("p",[v("code",[e._v("--strict")]),e._v("：打开 TypeScript 严格检查模式。")]),e._v(" "),v("p",[v("code",[e._v("--strictBindCallApply")]),e._v("：bind, call、apply 这三个函数的类型，匹配原始函数。")]),e._v(" "),v("p",[v("code",[e._v("--strictFunctionTypes")]),e._v("：如果函数 B 的参数是函数 A 参数的子类型，那么函数 B 不能替代函数 A。")]),e._v(" "),v("p",[v("code",[e._v("--strictNullChecks")]),e._v("：对"),v("code",[e._v("null")]),e._v("和"),v("code",[e._v("undefined")]),e._v("进行严格类型检查。")]),e._v(" "),v("p",[v("code",[e._v("--strictPropertyInitialization")]),e._v("：类的属性必须进行初始值，但是允许在构造函数里面赋值。")]),e._v(" "),v("p",[v("code",[e._v("--suppressExcessPropertyErrors")]),e._v("：关闭对象字面量的多余参数的报错。")]),e._v(" "),v("p",[v("code",[e._v("--target")]),e._v("：指定编译出来的 JS 代码的版本，TypeScript 还会在编译时自动加入对应的库类型声明文件。")]),e._v(" "),v("p",[v("code",[e._v("--traceResolution")]),e._v("：编译时在终端输出模块解析（moduleResolution）的具体步骤。")]),e._v(" "),v("p",[v("code",[e._v("--typeRoots")]),e._v("：设置类型模块所在的目录，替代默认的"),v("code",[e._v("node_modules/@types")]),e._v("。")]),e._v(" "),v("p",[v("code",[e._v("--types")]),e._v("：设置"),v("code",[e._v("typeRoots")]),e._v("目录下需要包括在编译之中的类型模块。")]),e._v(" "),v("p",[v("code",[e._v("--version")]),e._v("：终端输出 tsc 的版本号。")]),e._v(" "),v("p",[v("code",[e._v("--watch")]),e._v("（或者"),v("code",[e._v("-w")]),e._v("）：进入观察模式，只要文件有修改，就会自动重新编译。")])])}),[],!1,null,null,null);v.default=t.exports}}]);