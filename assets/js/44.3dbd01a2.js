(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{348:function(s,t,a){"use strict";a.r(t);var n=a(4),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"_2-c-语言基本语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-c-语言基本语法"}},[s._v("#")]),s._v(" 2.C 语言基本语法")]),s._v(" "),t("blockquote",[t("p",[s._v("作者："),t("a",{attrs:{href:"https://wangdoc.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("来自网道项目"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("本站地址："),t("a",{attrs:{href:"http://springsongs.cn",target:"_blank",rel:"noopener noreferrer"}},[s._v("http://springsongs.cn"),t("OutboundLink")],1)])]),s._v(" "),t("h2",{attrs:{id:"语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#语句"}},[s._v("#")]),s._v(" 语句")]),s._v(" "),t("p",[s._v("C 语言的代码由一行行语句（statement）组成。语句就是程序执行的一个操作命令。C 语言规定，语句必须使用分号结尾，除非有明确规定可以不写分号。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("上面就是一个变量声明语句，声明整数变量"),t("code",[s._v("x")]),s._v("，并且将值设为"),t("code",[s._v("1")]),s._v("。")]),s._v(" "),t("p",[s._v("多个语句可以写在一行。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("上面示例是两个语句写在一行。所以，语句之间的换行符并不是必需的，只是为了方便阅读代码。")]),s._v(" "),t("p",[s._v("一个语句也可以写成多行，这时就要依靠分号判断语句在哪一行结束。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nx\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("上面示例中，第二个语句"),t("code",[s._v("x = 1;")]),s._v("被拆成了四行。编译器会自动忽略代码里面的换行。")]),s._v(" "),t("p",[s._v("单个分号也是有效语句，称为“空语句”，虽然毫无作用。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h2",{attrs:{id:"表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#表达式"}},[s._v("#")]),s._v(" 表达式")]),s._v(" "),t("p",[s._v("C 语言的各种计算，主要通过表达式完成。表达式（expression）是一个计算式，用来获取值。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("上面代码就是一个表达式，用来获取"),t("code",[s._v("1 + 2")]),s._v("这个算术计算的结果。")]),s._v(" "),t("p",[s._v("表达式加上分号，也可以成为语句，但是没有实际的作用。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("上面示例是两个表达式，加上分号以后成为语句。")]),s._v(" "),t("p",[s._v("表达式与语句的区别主要是两点：")]),s._v(" "),t("ul",[t("li",[s._v("语句可以包含表达式，但是表达式本身不构成语句。")]),s._v(" "),t("li",[s._v("表达式都有返回值，语句不一定有。因为语句用来执行某个命令，很多时候不需要返回值，比如变量声明语句（"),t("code",[s._v("int x = 1")]),s._v("）就没有返回值。")])]),s._v(" "),t("h2",{attrs:{id:"语句块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#语句块"}},[s._v("#")]),s._v(" 语句块")]),s._v(" "),t("p",[s._v("C 语言允许多个语句使用一对大括号"),t("code",[s._v("{}")]),s._v("，组成一个块，也称为复合语句（compounded statement）。在语法上，语句块可以视为多个语句组成的一个复合语句。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("上面示例中，大括号形成了一个语句块。")]),s._v(" "),t("p",[s._v("大括号的结尾不需要添加分号。")]),s._v(" "),t("h2",{attrs:{id:"空格"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#空格"}},[s._v("#")]),s._v(" 空格")]),s._v(" "),t("p",[s._v("C 语言里面的空格，主要用来帮助编译器区分语法单位。如果语法单位不用空格就能区分，空格就不是必须的，只是为了增加代码的可读性。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等同于")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("上面示例中，赋值号（"),t("code",[s._v("=")]),s._v("）前后有没有空格都可以，因为编译器这里不借助空格，就能区分语法单位。")]),s._v(" "),t("p",[s._v("语法单位之间的多个空格，等同于单个空格。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v("    x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("上面示例中，各个语法单位之间的多个空格，跟单个空格的效果是一样的。")]),s._v(" "),t("p",[s._v("空格还用来表示缩进。多层级的代码有没有缩进，其实对于编译器来说并没有差别，没有缩进的代码也是完全可以运行的。强调代码缩进，只是为了增强代码可读性，便于区分代码块。")]),s._v(" "),t("p",[s._v("大多数 C 语言的风格要求是，下一级代码比上一级缩进4个空格。为了书写的紧凑，本书采用缩写两个空格。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 缩进四个空格")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"positive\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 缩进两个空格")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"positive\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("只包含空格的行被称为空白行，编译器会完全忽略该行。")]),s._v(" "),t("h2",{attrs:{id:"注释"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注释"}},[s._v("#")]),s._v(" 注释")]),s._v(" "),t("p",[s._v("注释是对代码的说明，编译器会忽略注释，也就是说，注释对实际代码没有影响。")]),s._v(" "),t("p",[s._v("C 语言的注释有两种表示方法。第一种方法是将注释放在"),t("code",[s._v("/*...*/")]),s._v("之间，内部可以分行。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 注释 */")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*\n  这是一行注释\n*/")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("这种注释可以插在行内。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("open")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" s "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* file name */")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" mode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("上面示例中，"),t("code",[s._v("/* file name */")]),s._v("用来对函数参数进行说明，跟在它后面的代码依然会有效执行。")]),s._v(" "),t("p",[s._v("这种注释一定不能忘记写结束符号"),t("code",[s._v("*/")]),s._v("，否则很容易导致错误。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a "')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/* 注释一\nprintf("b ");\nprintf("c "); /* 注释二 */')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"d "')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("上面示例的原意是，第一行和第三行代码的尾部，有两个注释。但是，第一行注释忘记写结束符号，导致注释一延续到第三行结束。")]),s._v(" "),t("p",[s._v("第二种写法是将注释放在双斜杠"),t("code",[s._v("//")]),s._v("后面，从双斜杠到行尾都属于注释。这种注释只能是单行，可以放在行首，也可以放在一行语句的结尾。这是 C99 标准新增的语法。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这是一行注释")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这也是注释")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("不管是哪一种注释，都不能放在双引号里面。双引号里面的注释符号，会成为字符串的一部分，解释为普通符号，失去注释作用。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"// hello /* world */ "')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("上面示例中，双引号里面的注释符号，都会被视为普通字符，没有注释作用。")]),s._v(" "),t("p",[s._v("编译时，注释会被替换成一个空格，所以"),t("code",[s._v("min/* space */Value")]),s._v("会变成"),t("code",[s._v("min Value")]),s._v("，而不是"),t("code",[s._v("minValue")]),s._v("。")]),s._v(" "),t("h2",{attrs:{id:"printf"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#printf"}},[s._v("#")]),s._v(" printf()")]),s._v(" "),t("h3",{attrs:{id:"基本用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本用法"}},[s._v("#")]),s._v(" 基本用法")]),s._v(" "),t("p",[s._v("本书的示例会大量用到"),t("code",[s._v("printf()")]),s._v("函数，这里先介绍一下这个函数。")]),s._v(" "),t("p",[t("code",[s._v("printf()")]),s._v("的作用是将参数文本输出到屏幕。它名字里面的"),t("code",[s._v("f")]),s._v("代表"),t("code",[s._v("format")]),s._v("（格式化），表示可以定制输出文本的格式。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello World"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("上面命令会在屏幕上输出一行文字“Hello World”。")]),s._v(" "),t("p",[t("code",[s._v("printf()")]),s._v("不会在行尾自动添加换行符，运行结束后，光标就停留在输出结束的地方，不会自动换行。为了让光标移到下一行的开头，可以在输出文本的结尾，添加一个换行符"),t("code",[s._v("\\n")]),s._v("。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello World\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("如果文本内部有换行，也是通过插入换行符来实现。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello\\nWorld\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("上面示例先输出一个"),t("code",[s._v("Hello")]),s._v("，然后换行，在下一行开头输出"),t("code",[s._v("World")]),s._v("，然后又是一个换行。")]),s._v(" "),t("p",[s._v("上面示例也可以写成两个"),t("code",[s._v("printf()")]),s._v("，效果完全一样。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"World\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[t("code",[s._v("printf()")]),s._v("是在标准库的头文件"),t("code",[s._v("stdio.h")]),s._v("定义的。使用这个函数之前，必须在源码文件头部引入这个头文件。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<stdio.h>")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello World\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("上面示例中，只有在源码头部加上"),t("code",[s._v("#include <stdio.h>")]),s._v("，才能使用"),t("code",[s._v("printf()")]),s._v("这个函数。"),t("code",[s._v("#include")]),s._v("指令的详细解释，请看《预处理器》一章。")]),s._v(" "),t("h3",{attrs:{id:"占位符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#占位符"}},[s._v("#")]),s._v(" 占位符")]),s._v(" "),t("p",[t("code",[s._v("printf()")]),s._v("可以在输出文本中指定占位符。所谓“占位符”，就是这个位置可以用其他值代入。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出 There are 3 apples")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"There are %i apples\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("上面示例中，"),t("code",[s._v("There are %i apples\\n")]),s._v("是输出文本，里面的"),t("code",[s._v("%i")]),s._v("就是占位符，表示这个位置要用其他值来替换。占位符的第一个字符一律为百分号"),t("code",[s._v("%")]),s._v("，第二个字符表示占位符的类型，"),t("code",[s._v("%i")]),s._v("表示这里代入的值必须是一个整数。")]),s._v(" "),t("p",[t("code",[s._v("printf()")]),s._v("的第二个参数就是替换占位符的值，上面的例子是整数"),t("code",[s._v("3")]),s._v("替换"),t("code",[s._v("%i")]),s._v("。执行后的输出结果就是"),t("code",[s._v("There are 3 apples")]),s._v("。")]),s._v(" "),t("p",[s._v("常用的占位符除了"),t("code",[s._v("%i")]),s._v("，还有"),t("code",[s._v("%s")]),s._v("表示代入的是字符串。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%s will come tonight\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Jane"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("上面示例中，"),t("code",[s._v("%s")]),s._v("表示代入的是一个字符串，所以"),t("code",[s._v("printf()")]),s._v("的第二个参数就必须是字符串，这个例子是"),t("code",[s._v("Jane")]),s._v("。执行后的输出就是"),t("code",[s._v("Jane will come tonight")]),s._v("。")]),s._v(" "),t("p",[s._v("输出文本里面可以使用多个占位符。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%s says it is %i o\'clock\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Ben"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("上面示例中，输出文本"),t("code",[s._v("%s says it is %i o'clock")]),s._v("有两个占位符，第一个是字符串占位符"),t("code",[s._v("%s")]),s._v("，第二个是整数占位符"),t("code",[s._v("%i")]),s._v("，分别对应"),t("code",[s._v("printf()")]),s._v("的第二个参数（"),t("code",[s._v("Ben")]),s._v("）和第三个参数（"),t("code",[s._v("21")]),s._v("）。执行后的输出就是"),t("code",[s._v("Ben says it is 21 o'clock")]),s._v("。")]),s._v(" "),t("p",[t("code",[s._v("printf()")]),s._v("参数与占位符是一一对应关系，如果有"),t("code",[s._v("n")]),s._v("个占位符，"),t("code",[s._v("printf()")]),s._v("的参数就应该有"),t("code",[s._v("n + 1")]),s._v("个。如果参数个数少于对应的占位符，"),t("code",[s._v("printf()")]),s._v("可能会输出内存中的任意值。")]),s._v(" "),t("p",[t("code",[s._v("printf()")]),s._v("的占位符有许多种类，与 C 语言的数据类型相对应。下面按照字母顺序，列出常用的占位符，方便查找，具体含义在后面章节介绍。")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("%a")]),s._v("：十六进制浮点数，字母输出为小写。")]),s._v(" "),t("li",[t("code",[s._v("%A")]),s._v("：十六进制浮点数，字母输出为大写。")]),s._v(" "),t("li",[t("code",[s._v("%c")]),s._v("：字符。")]),s._v(" "),t("li",[t("code",[s._v("%d")]),s._v("：十进制整数。")]),s._v(" "),t("li",[t("code",[s._v("%e")]),s._v("：使用科学计数法的浮点数，指数部分的"),t("code",[s._v("e")]),s._v("为小写。")]),s._v(" "),t("li",[t("code",[s._v("%E")]),s._v("：使用科学计数法的浮点数，指数部分的"),t("code",[s._v("E")]),s._v("为大写。")]),s._v(" "),t("li",[t("code",[s._v("%i")]),s._v("：整数，基本等同于"),t("code",[s._v("%d")]),s._v("。")]),s._v(" "),t("li",[t("code",[s._v("%f")]),s._v("：小数（包含"),t("code",[s._v("float")]),s._v("类型和"),t("code",[s._v("double")]),s._v("类型）。")]),s._v(" "),t("li",[t("code",[s._v("%g")]),s._v("：6个有效数字的浮点数。整数部分一旦超过6位，就会自动转为科学计数法，指数部分的"),t("code",[s._v("e")]),s._v("为小写。")]),s._v(" "),t("li",[t("code",[s._v("%G")]),s._v("：等同于"),t("code",[s._v("%g")]),s._v("，唯一的区别是指数部分的"),t("code",[s._v("E")]),s._v("为大写。")]),s._v(" "),t("li",[t("code",[s._v("%hd")]),s._v("：十进制 short int 类型。")]),s._v(" "),t("li",[t("code",[s._v("%ho")]),s._v("：八进制 short int 类型。")]),s._v(" "),t("li",[t("code",[s._v("%hx")]),s._v("：十六进制 short int 类型。")]),s._v(" "),t("li",[t("code",[s._v("%hu")]),s._v("：unsigned short int 类型。")]),s._v(" "),t("li",[t("code",[s._v("%ld")]),s._v("：十进制 long int 类型。")]),s._v(" "),t("li",[t("code",[s._v("%lo")]),s._v("：八进制 long int 类型。")]),s._v(" "),t("li",[t("code",[s._v("%lx")]),s._v("：十六进制 long int 类型。")]),s._v(" "),t("li",[t("code",[s._v("%lu")]),s._v("：unsigned long int 类型。")]),s._v(" "),t("li",[t("code",[s._v("%lld")]),s._v("：十进制 long long int 类型。")]),s._v(" "),t("li",[t("code",[s._v("%llo")]),s._v("：八进制 long long int 类型。")]),s._v(" "),t("li",[t("code",[s._v("%llx")]),s._v("：十六进制 long long int 类型。")]),s._v(" "),t("li",[t("code",[s._v("%llu")]),s._v("：unsigned long long int 类型。")]),s._v(" "),t("li",[t("code",[s._v("%Le")]),s._v("：科学计数法表示的 long double 类型浮点数。")]),s._v(" "),t("li",[t("code",[s._v("%Lf")]),s._v("：long double 类型浮点数。")]),s._v(" "),t("li",[t("code",[s._v("%n")]),s._v("：已输出的字符串数量。该占位符本身不输出，只将值存储在指定变量之中。")]),s._v(" "),t("li",[t("code",[s._v("%o")]),s._v("：八进制整数。")]),s._v(" "),t("li",[t("code",[s._v("%p")]),s._v("：指针。")]),s._v(" "),t("li",[t("code",[s._v("%s")]),s._v("：字符串。")]),s._v(" "),t("li",[t("code",[s._v("%u")]),s._v("：无符号整数（unsigned int）。")]),s._v(" "),t("li",[t("code",[s._v("%x")]),s._v("：十六进制整数。")]),s._v(" "),t("li",[t("code",[s._v("%zd")]),s._v("："),t("code",[s._v("size_t")]),s._v("类型。")]),s._v(" "),t("li",[t("code",[s._v("%%")]),s._v("：输出一个百分号。")])]),s._v(" "),t("h3",{attrs:{id:"输出格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#输出格式"}},[s._v("#")]),s._v(" 输出格式")]),s._v(" "),t("p",[t("code",[s._v("printf()")]),s._v("可以定制占位符的输出格式。")]),s._v(" "),t("p",[s._v("（1）限定宽度")]),s._v(" "),t("p",[t("code",[s._v("printf()")]),s._v("允许限定占位符的最小宽度。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%5d\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// 输出为 "  123"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("上面示例中，"),t("code",[s._v("%5d")]),s._v("表示这个占位符的宽度至少为5位。如果不满5位，对应的值的前面会添加空格。")]),s._v(" "),t("p",[s._v("输出的值默认是右对齐，即输出内容前面会有空格；如果希望改成左对齐，在输出内容后面添加空格，可以在占位符的"),t("code",[s._v("%")]),s._v("的后面插入一个"),t("code",[s._v("-")]),s._v("号。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%-5d\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// 输出为 "123  "')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("上面示例中，输出内容"),t("code",[s._v("123")]),s._v("的后面添加了空格。")]),s._v(" "),t("p",[s._v("对于小数，这个限定符会限制所有数字的最小显示宽度。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// 输出 "  123.450000"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%12f\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("123.45")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("上面示例中，"),t("code",[s._v("%12f")]),s._v("表示输出的浮点数最少要占据12位。由于小数的默认显示精度是小数点后6位，所以"),t("code",[s._v("123.45")]),s._v("输出结果的头部会添加2个空格。")]),s._v(" "),t("p",[s._v("（2）总是显示正负号")]),s._v(" "),t("p",[s._v("默认情况下，"),t("code",[s._v("printf()")]),s._v("不对正数显示"),t("code",[s._v("+")]),s._v("号，只对负数显示"),t("code",[s._v("-")]),s._v("号。如果想让正数也输出"),t("code",[s._v("+")]),s._v("号，可以在占位符的"),t("code",[s._v("%")]),s._v("后面加一个"),t("code",[s._v("+")]),s._v("。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%+d\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出 +12")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%+d\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出 -12")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("上面示例中，"),t("code",[s._v("%+d")]),s._v("可以确保输出的数值，总是带有正负号。")]),s._v(" "),t("p",[s._v("（3）限定小数位数")]),s._v(" "),t("p",[s._v("输出小数时，有时希望限定小数的位数。举例来说，希望小数点后面只保留两位，占位符可以写成"),t("code",[s._v("%.2f")]),s._v("。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出 Number is 0.50")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Number is %.2f\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("上面示例中，如果希望小数点后面输出3位（"),t("code",[s._v("0.500")]),s._v("），占位符就要写成"),t("code",[s._v("%.3f")]),s._v("。")]),s._v(" "),t("p",[s._v("这种写法可以与限定宽度占位符，结合使用。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// 输出为 "  0.50"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%6.2f\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("上面示例中，"),t("code",[s._v("%6.2f")]),s._v("表示输出字符串最小宽度为6，小数位数为2。所以，输出字符串的头部有两个空格。")]),s._v(" "),t("p",[s._v("最小宽度和小数位数这两个限定值，都可以用"),t("code",[s._v("*")]),s._v("代替，通过"),t("code",[s._v("printf()")]),s._v("的参数传入。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%*.*f\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等同于")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%6.2f\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("上面示例中，"),t("code",[s._v("%*.*f")]),s._v("的两个星号通过"),t("code",[s._v("printf()")]),s._v("的两个参数"),t("code",[s._v("6")]),s._v("和"),t("code",[s._v("2")]),s._v("传入。")]),s._v(" "),t("p",[s._v("（4）输出部分字符串")]),s._v(" "),t("p",[t("code",[s._v("%s")]),s._v("占位符用来输出字符串，默认是全部输出。如果只想输出开头的部分，可以用"),t("code",[s._v("%.[m]s")]),s._v("指定输出的长度，其中"),t("code",[s._v("[m]")]),s._v("代表一个数字，表示所要输出的长度。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出 hello")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%.5s\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello world"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("上面示例中，占位符"),t("code",[s._v("%.5s")]),s._v("表示只输出字符串“hello world”的前5个字符，即“hello”。")]),s._v(" "),t("h2",{attrs:{id:"标准库-头文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标准库-头文件"}},[s._v("#")]),s._v(" 标准库，头文件")]),s._v(" "),t("p",[s._v("程序需要用到的功能，不一定需要自己编写，C 语言可能已经自带了。程序员只要去调用这些自带的功能，就省得自己编写代码了。举例来说，"),t("code",[s._v("printf()")]),s._v("这个函数就是 C 语言自带的，只要去调用它，就能实现在屏幕上输出内容。")]),s._v(" "),t("p",[s._v("C 语言自带的所有这些功能，统称为“标准库”（standard library），因为它们是写入标准的，到底包括哪些功能，应该怎么使用的，都是规定好的，这样才能保证代码的规范和可移植。")]),s._v(" "),t("p",[s._v("不同的功能定义在不同的文件里面，这些文件统称为“头文件”（header file）。如果系统自带某一个功能，就一定还会自带描述这个功能的头文件，比如"),t("code",[s._v("printf()")]),s._v("的头文件就是系统自带的"),t("code",[s._v("stdio.h")]),s._v("。头文件的后缀通常是"),t("code",[s._v(".h")]),s._v("。")]),s._v(" "),t("p",[s._v("如果要使用某个功能，就必须先加载对应的头文件，加载使用的是"),t("code",[s._v("#include")]),s._v("命令。这就是为什么使用"),t("code",[s._v("printf()")]),s._v("之前，必须先加载"),t("code",[s._v("stdio.h")]),s._v("的原因。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<stdio.h>")])]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("注意，加载头文件的"),t("code",[s._v("#include")]),s._v("语句不需要分号结尾，详见《预处理器》一章。")])])}),[],!1,null,null,null);t.default=e.exports}}]);