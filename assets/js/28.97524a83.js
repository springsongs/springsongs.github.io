(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{326:function(s,a,e){"use strict";e.r(a);var t=e(4),n=Object(t.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"bash-脚本入门"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bash-脚本入门"}},[s._v("#")]),s._v(" Bash 脚本入门")]),s._v(" "),a("blockquote",[a("p",[s._v("作者："),a("a",{attrs:{href:"https://wangdoc.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("来自网道项目"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("本站地址："),a("a",{attrs:{href:"http://springsongs.cn",target:"_blank",rel:"noopener noreferrer"}},[s._v("http://springsongs.cn"),a("OutboundLink")],1)])]),s._v(" "),a("p",[s._v("脚本（script）就是包含一系列命令的一个文本文件。Shell 读取这个文件，依次执行里面的所有命令，就好像这些命令直接输入到命令行一样。所有能够在命令行完成的任务，都能够用脚本完成。")]),s._v(" "),a("p",[s._v("脚本的好处是可以重复使用，也可以指定在特定场合自动调用，比如系统启动或关闭时自动执行脚本。")]),s._v(" "),a("h2",{attrs:{id:"shebang-行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shebang-行"}},[s._v("#")]),s._v(" Shebang 行")]),s._v(" "),a("p",[s._v("脚本的第一行通常是指定解释器，即这个脚本必须通过什么解释器执行。这一行以"),a("code",[s._v("#!")]),s._v("字符开头，这个字符称为 Shebang，所以这一行就叫做 Shebang 行。")]),s._v(" "),a("p",[a("code",[s._v("#!")]),s._v("后面就是脚本解释器的位置，Bash 脚本的解释器一般是"),a("code",[s._v("/bin/sh")]),s._v("或"),a("code",[s._v("/bin/bash")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/sh")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 或者")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/bash")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("code",[s._v("#!")]),s._v("与脚本解释器之间有没有空格，都是可以的。")]),s._v(" "),a("p",[s._v("如果 Bash 解释器不放在目录"),a("code",[s._v("/bin")]),s._v("，脚本就无法执行了。为了保险，可以写成下面这样。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/usr/bin/env bash")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上面命令使用"),a("code",[s._v("env")]),s._v("命令（这个命令总是在"),a("code",[s._v("/usr/bin")]),s._v("目录），返回 Bash 可执行文件的位置。"),a("code",[s._v("env")]),s._v("命令的详细介绍，请看后文。")]),s._v(" "),a("p",[s._v("Shebang 行不是必需的，但是建议加上这行。如果缺少该行，就需要手动将脚本传给解释器。举例来说，脚本是"),a("code",[s._v("script.sh")]),s._v("，有 Shebang 行的时候，可以直接调用执行。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ ./script.sh\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上面例子中，"),a("code",[s._v("script.sh")]),s._v("是脚本文件名。脚本通常使用"),a("code",[s._v(".sh")]),s._v("后缀名，不过这不是必需的。")]),s._v(" "),a("p",[s._v("如果没有 Shebang 行，就只能手动将脚本传给解释器来执行。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ /bin/sh ./script.sh\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 或者")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v(" ./script.sh\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"执行权限和路径"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行权限和路径"}},[s._v("#")]),s._v(" 执行权限和路径")]),s._v(" "),a("p",[s._v("前面说过，只要指定了 Shebang 行的脚本，可以直接执行。这有一个前提条件，就是脚本需要有执行权限。可以使用下面的命令，赋予脚本执行权限。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 给所有用户执行权限")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" +x script.sh\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 给所有用户读权限和执行权限")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" +rx script.sh\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 或者")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("755")]),s._v(" script.sh\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 只给脚本拥有者读权限和执行权限")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" u+rx script.sh\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("脚本的权限通常设为"),a("code",[s._v("755")]),s._v("（拥有者有所有权限，其他人有读和执行权限）或者"),a("code",[s._v("700")]),s._v("（只有拥有者可以执行）。")]),s._v(" "),a("p",[s._v("除了执行权限，脚本调用时，一般需要指定脚本的路径（比如"),a("code",[s._v("path/script.sh")]),s._v("）。如果将脚本放在环境变量"),a("code",[s._v("$PATH")]),s._v("指定的目录中，就不需要指定路径了。因为 Bash 会自动到这些目录中，寻找是否存在同名的可执行文件。")]),s._v(" "),a("p",[s._v("建议在主目录新建一个"),a("code",[s._v("~/bin")]),s._v("子目录，专门存放可执行脚本，然后把"),a("code",[s._v("~/bin")]),s._v("加入"),a("code",[s._v("$PATH")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("export")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("PATH")])]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$PATH")]),s._v(":~/bin\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上面命令改变环境变量"),a("code",[s._v("$PATH")]),s._v("，将"),a("code",[s._v("~/bin")]),s._v("添加到"),a("code",[s._v("$PATH")]),s._v("的末尾。可以将这一行加到"),a("code",[s._v("~/.bashrc")]),s._v("文件里面，然后重新加载一次"),a("code",[s._v(".bashrc")]),s._v("，这个配置就可以生效了。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("source")]),s._v(" ~/.bashrc\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("以后不管在什么目录，直接输入脚本文件名，脚本就会执行。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ script.sh\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上面命令没有指定脚本路径，因为"),a("code",[s._v("script.sh")]),s._v("在"),a("code",[s._v("$PATH")]),s._v("指定的目录中。")]),s._v(" "),a("h2",{attrs:{id:"env-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#env-命令"}},[s._v("#")]),s._v(" env 命令")]),s._v(" "),a("p",[a("code",[s._v("env")]),s._v("命令总是指向"),a("code",[s._v("/usr/bin/env")]),s._v("文件，或者说，这个二进制文件总是在目录"),a("code",[s._v("/usr/bin")]),s._v("。")]),s._v(" "),a("p",[a("code",[s._v("#!/usr/bin/env NAME")]),s._v("这个语法的意思是，让 Shell 查找"),a("code",[s._v("$PATH")]),s._v("环境变量里面第一个匹配的"),a("code",[s._v("NAME")]),s._v("。如果你不知道某个命令的具体路径，或者希望兼容其他用户的机器，这样的写法就很有用。")]),s._v(" "),a("p",[a("code",[s._v("/usr/bin/env bash")]),s._v("的意思就是，返回"),a("code",[s._v("bash")]),s._v("可执行文件的位置，前提是"),a("code",[s._v("bash")]),s._v("的路径是在"),a("code",[s._v("$PATH")]),s._v("里面。其他脚本文件也可以使用这个命令。比如 Node.js 脚本的 Shebang 行，可以写成下面这样。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/usr/bin/env node")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("code",[s._v("env")]),s._v("命令的参数如下。")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("-i")]),s._v(", "),a("code",[s._v("--ignore-environment")]),s._v("：不带环境变量启动。")]),s._v(" "),a("li",[a("code",[s._v("-u")]),s._v(", "),a("code",[s._v("--unset=NAME")]),s._v("：从环境变量中删除一个变量。")]),s._v(" "),a("li",[a("code",[s._v("--help")]),s._v("：显示帮助。")]),s._v(" "),a("li",[a("code",[s._v("--version")]),s._v("：输出版本信息。")])]),s._v(" "),a("p",[s._v("下面是一个例子，新建一个不带任何环境变量的 Shell。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("env")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-i")]),s._v(" /bin/sh\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"注释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注释"}},[s._v("#")]),s._v(" 注释")]),s._v(" "),a("p",[s._v("Bash 脚本中，"),a("code",[s._v("#")]),s._v("表示注释，可以放在行首，也可以放在行尾。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 本行是注释")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Hello World!'")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Hello World!'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 井号后面的部分也是注释")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("建议在脚本开头，使用注释说明当前脚本的作用，这样有利于日后的维护。")]),s._v(" "),a("h2",{attrs:{id:"脚本参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#脚本参数"}},[s._v("#")]),s._v(" 脚本参数")]),s._v(" "),a("p",[s._v("调用脚本的时候，脚本文件名后面可以带有参数。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ script.sh word1 word2 word3\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上面例子中，"),a("code",[s._v("script.sh")]),s._v("是一个脚本文件，"),a("code",[s._v("word1")]),s._v("、"),a("code",[s._v("word2")]),s._v("和"),a("code",[s._v("word3")]),s._v("是三个参数。")]),s._v(" "),a("p",[s._v("脚本文件内部，可以使用特殊变量，引用这些参数。")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("$0")]),s._v("：脚本文件名，即"),a("code",[s._v("script.sh")]),s._v("。")]),s._v(" "),a("li",[a("code",[s._v("$1")]),s._v("~"),a("code",[s._v("$9")]),s._v("：对应脚本的第一个参数到第九个参数。")]),s._v(" "),a("li",[a("code",[s._v("$#")]),s._v("：参数的总数。")]),s._v(" "),a("li",[a("code",[s._v("$@")]),s._v("：全部的参数，参数之间使用空格分隔。")]),s._v(" "),a("li",[a("code",[s._v("$*")]),s._v("：全部的参数，参数之间使用变量"),a("code",[s._v("$IFS")]),s._v("值的第一个字符分隔，默认为空格，但是可以自定义。")])]),s._v(" "),a("p",[s._v("如果脚本的参数多于9个，那么第10个参数可以用"),a("code",[s._v("${10}")]),s._v("的形式引用，以此类推。")]),s._v(" "),a("p",[s._v("注意，如果命令是"),a("code",[s._v("command -o foo bar")]),s._v("，那么"),a("code",[s._v("-o")]),s._v("是"),a("code",[s._v("$1")]),s._v("，"),a("code",[s._v("foo")]),s._v("是"),a("code",[s._v("$2")]),s._v("，"),a("code",[s._v("bar")]),s._v("是"),a("code",[s._v("$3")]),s._v("。")]),s._v(" "),a("p",[s._v("下面是一个脚本内部读取命令行参数的例子。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/bash")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# script.sh")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"全部参数："')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$@")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"命令行参数数量："')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$#")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'$0 = '")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'$1 = '")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'$2 = '")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$2")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'$3 = '")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$3")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("执行结果如下。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ ./script.sh a b c\n全部参数：a b c\n命令行参数数量：3\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("  script.sh\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("  a\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("  b\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("  c\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("用户可以输入任意数量的参数，利用"),a("code",[s._v("for")]),s._v("循环，可以读取每一个参数。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/bash")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("i")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$@")]),s._v('"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$i")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("上面例子中，"),a("code",[s._v("$@")]),s._v("返回一个全部参数的列表，然后使用"),a("code",[s._v("for")]),s._v("循环遍历。")]),s._v(" "),a("p",[s._v("如果多个参数放在双引号里面，视为一个参数。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ ./script.sh "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a b"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上面例子中，Bash 会认为"),a("code",[s._v('"a b"')]),s._v("是一个参数，"),a("code",[s._v("$1")]),s._v("会返回"),a("code",[s._v("a b")]),s._v("。注意，返回时不包括双引号。")]),s._v(" "),a("h2",{attrs:{id:"shift-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shift-命令"}},[s._v("#")]),s._v(" shift 命令")]),s._v(" "),a("p",[a("code",[s._v("shift")]),s._v("命令可以改变脚本参数，每次执行都会移除脚本当前的第一个参数（"),a("code",[s._v("$1")]),s._v("），使得后面的参数向前一位，即"),a("code",[s._v("$2")]),s._v("变成"),a("code",[s._v("$1")]),s._v("、"),a("code",[s._v("$3")]),s._v("变成"),a("code",[s._v("$2")]),s._v("、"),a("code",[s._v("$4")]),s._v("变成"),a("code",[s._v("$3")]),s._v("，以此类推。")]),s._v(" "),a("p",[a("code",[s._v("while")]),s._v("循环结合"),a("code",[s._v("shift")]),s._v("命令，也可以读取每一个参数。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/bash")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"一共输入了 '),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$#")]),s._v(' 个参数"')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"剩下 '),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$#")]),s._v(' 个参数"')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"参数：'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v('"')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("shift")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("上面例子中，"),a("code",[s._v("shift")]),s._v("命令每次移除当前第一个参数，从而通过"),a("code",[s._v("while")]),s._v("循环遍历所有参数。")]),s._v(" "),a("p",[a("code",[s._v("shift")]),s._v("命令可以接受一个整数作为参数，指定所要移除的参数个数，默认为"),a("code",[s._v("1")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("shift")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上面的命令移除前三个参数，原来的"),a("code",[s._v("$4")]),s._v("变成"),a("code",[s._v("$1")]),s._v("。")]),s._v(" "),a("h2",{attrs:{id:"getopts-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getopts-命令"}},[s._v("#")]),s._v(" getopts 命令")]),s._v(" "),a("p",[a("code",[s._v("getopts")]),s._v("命令用在脚本内部，可以解析复杂的脚本命令行参数，通常与"),a("code",[s._v("while")]),s._v("循环一起使用，取出脚本所有的带有前置连词线（"),a("code",[s._v("-")]),s._v("）的参数。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("getopts")]),s._v(" optstring name\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("它带有两个参数。第一个参数"),a("code",[s._v("optstring")]),s._v("是字符串，给出脚本所有的连词线参数。比如，某个脚本可以有三个配置项参数"),a("code",[s._v("-l")]),s._v("、"),a("code",[s._v("-h")]),s._v("、"),a("code",[s._v("-a")]),s._v("，其中只有"),a("code",[s._v("-a")]),s._v("可以带有参数值，而"),a("code",[s._v("-l")]),s._v("和"),a("code",[s._v("-h")]),s._v("是开关参数，那么"),a("code",[s._v("getopts")]),s._v("的第一个参数写成"),a("code",[s._v("lha:")]),s._v("，顺序不重要。注意，"),a("code",[s._v("a")]),s._v("后面有一个冒号，表示该参数带有参数值，"),a("code",[s._v("getopts")]),s._v("规定带有参数值的配置项参数，后面必须带有一个冒号（"),a("code",[s._v(":")]),s._v("）。"),a("code",[s._v("getopts")]),s._v("的第二个参数"),a("code",[s._v("name")]),s._v("是一个变量名，用来保存当前取到的配置项参数，即"),a("code",[s._v("l")]),s._v("、"),a("code",[s._v("h")]),s._v("或"),a("code",[s._v("a")]),s._v("。")]),s._v(" "),a("p",[s._v("下面是一个例子。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("getopts")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'lha:'")]),s._v(" OPTION"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$OPTION")]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v("\n    l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"linuxconfig"')]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    h"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"h stands for h"')]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("avalue")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$OPTARG")]),s._v('"')]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"The value provided is '),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$OPTARG")]),s._v('"')]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    ?"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"script usage: '),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("basename")]),s._v(" $0"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v(' [-l] [-h] [-a somevalue]"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("&2")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("esac")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("shift")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$((")]),s._v("$OPTIND "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("))")])]),s._v('"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("p",[s._v("上面例子中，"),a("code",[s._v("while")]),s._v("循环不断执行"),a("code",[s._v("getopts 'lha:' OPTION")]),s._v("命令，每次执行就会读取一个连词线参数（以及对应的参数值），然后进入循环体。变量"),a("code",[s._v("OPTION")]),s._v("保存的是，当前处理的那一个连词线参数（即"),a("code",[s._v("l")]),s._v("、"),a("code",[s._v("h")]),s._v("或"),a("code",[s._v("a")]),s._v("）。如果用户输入了没有指定的参数（比如"),a("code",[s._v("-x")]),s._v("），那么"),a("code",[s._v("OPTION")]),s._v("等于"),a("code",[s._v("?")]),s._v("。循环体内使用"),a("code",[s._v("case")]),s._v("判断，处理这四种不同的情况。")]),s._v(" "),a("p",[s._v("如果某个连词线参数带有参数值，比如"),a("code",[s._v("-a foo")]),s._v("，那么处理"),a("code",[s._v("a")]),s._v("参数的时候，环境变量"),a("code",[s._v("$OPTARG")]),s._v("保存的就是参数值。")]),s._v(" "),a("p",[s._v("注意，只要遇到不带连词线的参数，"),a("code",[s._v("getopts")]),s._v("就会执行失败，从而退出"),a("code",[s._v("while")]),s._v("循环。比如，"),a("code",[s._v("getopts")]),s._v("可以解析"),a("code",[s._v("command -l foo")]),s._v("，但不可以解析"),a("code",[s._v("command foo -l")]),s._v("。另外，多个连词线参数写在一起的形式，比如"),a("code",[s._v("command -lh")]),s._v("，"),a("code",[s._v("getopts")]),s._v("也可以正确处理。")]),s._v(" "),a("p",[s._v("变量"),a("code",[s._v("$OPTIND")]),s._v("在"),a("code",[s._v("getopts")]),s._v("开始执行前是"),a("code",[s._v("1")]),s._v("，然后每次执行就会加"),a("code",[s._v("1")]),s._v("。等到退出"),a("code",[s._v("while")]),s._v("循环，就意味着连词线参数全部处理完毕。这时，"),a("code",[s._v("$OPTIND - 1")]),s._v("就是已经处理的连词线参数个数，使用"),a("code",[s._v("shift")]),s._v("命令将这些参数移除，保证后面的代码可以用"),a("code",[s._v("$1")]),s._v("、"),a("code",[s._v("$2")]),s._v("等处理命令的主参数。")]),s._v(" "),a("h2",{attrs:{id:"配置项参数终止符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置项参数终止符"}},[s._v("#")]),s._v(" 配置项参数终止符 "),a("code",[s._v("--")])]),s._v(" "),a("p",[a("code",[s._v("-")]),s._v("和"),a("code",[s._v("--")]),s._v("开头的参数，会被 Bash 当作配置项解释。但是，有时它们不是配置项，而是实体参数的一部分，比如文件名叫做"),a("code",[s._v("-f")]),s._v("或"),a("code",[s._v("--file")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--file")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面命令的原意是输出文件"),a("code",[s._v("-f")]),s._v("和"),a("code",[s._v("--file")]),s._v("的内容，但是会被 Bash 当作配置项解释。")]),s._v(" "),a("p",[s._v("这时就可以使用配置项参数终止符"),a("code",[s._v("--")]),s._v("，它的作用是告诉 Bash，在它后面的参数开头的"),a("code",[s._v("-")]),s._v("和"),a("code",[s._v("--")]),s._v("不是配置项，只能当作实体参数解释。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" -- "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" -- "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--file")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面命令可以正确展示文件"),a("code",[s._v("-f")]),s._v("和"),a("code",[s._v("--file")]),s._v("的内容，因为它们放在"),a("code",[s._v("--")]),s._v("的后面，开头的"),a("code",[s._v("-")]),s._v("和"),a("code",[s._v("--")]),s._v("就不再当作配置项解释了。")]),s._v(" "),a("p",[s._v("如果要确保某个变量不会被当作配置项解释，就要在它前面放上参数终止符"),a("code",[s._v("--")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" -- "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$myPath")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上面示例中，"),a("code",[s._v("--")]),s._v("强制变量"),a("code",[s._v("$myPath")]),s._v("只能当作实体参数（即路径名）解释。如果变量不是路径名，就会报错。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("myPath")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-l"')]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" -- "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$myPath")]),s._v("\nls: 无法访问"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'-l'")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" 没有那个文件或目录\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("上面例子中，变量"),a("code",[s._v("myPath")]),s._v("的值为"),a("code",[s._v("-l")]),s._v("，不是路径。但是，"),a("code",[s._v("--")]),s._v("强制"),a("code",[s._v("$myPath")]),s._v("只能作为路径解释，导致报错“不存在该路径”。")]),s._v(" "),a("p",[s._v("下面是另一个实际的例子，如果想在文件里面搜索"),a("code",[s._v("--hello")]),s._v("，这时也要使用参数终止符"),a("code",[s._v("--")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" -- "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"--hello"')]),s._v(" example.txt\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上面命令在"),a("code",[s._v("example.txt")]),s._v("文件里面，搜索字符串"),a("code",[s._v("--hello")]),s._v("。这个字符串是"),a("code",[s._v("--")]),s._v("开头，如果不用参数终止符，"),a("code",[s._v("grep")]),s._v("命令就会把"),a("code",[s._v("--hello")]),s._v("当作配置项参数，从而报错。")]),s._v(" "),a("h2",{attrs:{id:"exit-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exit-命令"}},[s._v("#")]),s._v(" exit 命令")]),s._v(" "),a("p",[a("code",[s._v("exit")]),s._v("命令用于终止当前脚本的执行，并向 Shell 返回一个退出值。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上面命令中止当前脚本，将最后一条命令的退出状态，作为整个脚本的退出状态。")]),s._v(" "),a("p",[a("code",[s._v("exit")]),s._v("命令后面可以跟参数，该参数就是退出状态。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 退出值为0（成功）")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 退出值为1（失败）")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("退出时，脚本会返回一个退出值。脚本的退出值，"),a("code",[s._v("0")]),s._v("表示正常，"),a("code",[s._v("1")]),s._v("表示发生错误，"),a("code",[s._v("2")]),s._v("表示用法不对，"),a("code",[s._v("126")]),s._v("表示不是可执行脚本，"),a("code",[s._v("127")]),s._v("表示命令没有发现。如果脚本被信号"),a("code",[s._v("N")]),s._v("终止，则退出值为"),a("code",[s._v("128 + N")]),s._v("。简单来说，只要退出值非0，就认为执行出错。")]),s._v(" "),a("p",[s._v("下面是一个例子。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-u")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"0"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"根用户才能执行当前脚本"')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("上面的例子中，"),a("code",[s._v("id -u")]),s._v("命令返回用户的 ID，一旦用户的 ID 不等于"),a("code",[s._v("0")]),s._v("（根用户的 ID），脚本就会退出，并且退出码为"),a("code",[s._v("1")]),s._v("，表示运行失败。")]),s._v(" "),a("p",[a("code",[s._v("exit")]),s._v("与"),a("code",[s._v("return")]),s._v("命令的差别是，"),a("code",[s._v("return")]),s._v("命令是函数的退出，并返回一个值给调用者，脚本依然执行。"),a("code",[s._v("exit")]),s._v("是整个脚本的退出，如果在函数之中调用"),a("code",[s._v("exit")]),s._v("，则退出函数，并终止脚本执行。")]),s._v(" "),a("h2",{attrs:{id:"命令执行结果"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命令执行结果"}},[s._v("#")]),s._v(" 命令执行结果")]),s._v(" "),a("p",[s._v("命令执行结束后，会有一个返回值。"),a("code",[s._v("0")]),s._v("表示执行成功，非"),a("code",[s._v("0")]),s._v("（通常是"),a("code",[s._v("1")]),s._v("）表示执行失败。环境变量"),a("code",[s._v("$?")]),s._v("可以读取前一个命令的返回值。")]),s._v(" "),a("p",[s._v("利用这一点，可以在脚本中对命令执行结果进行判断。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" /path/to/somewhere\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"0"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" *\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"无法切换目录！"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("1")]),s._v(">")]),a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("&2")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("上面例子中，"),a("code",[s._v("cd /path/to/somewhere")]),s._v("这个命令如果执行成功（返回值等于"),a("code",[s._v("0")]),s._v("），就删除该目录里面的文件，否则退出脚本，整个脚本的返回值变为"),a("code",[s._v("1")]),s._v("，表示执行失败。")]),s._v(" "),a("p",[s._v("由于"),a("code",[s._v("if")]),s._v("可以直接判断命令的执行结果，执行相应的操作，上面的脚本可以改写成下面的样子。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" /path/to/somewhere"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" *\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Could not change directory! Aborting."')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("1")]),s._v(">")]),a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("&2")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("更简洁的写法是利用两个逻辑运算符"),a("code",[s._v("&&")]),s._v("（且）和"),a("code",[s._v("||")]),s._v("（或）。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 第一步执行成功，才会执行第二步")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" /path/to/somewhere "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" *\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 第一步执行失败，才会执行第二步")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" /path/to/somewhere "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h2",{attrs:{id:"source-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#source-命令"}},[s._v("#")]),s._v(" source 命令")]),s._v(" "),a("p",[a("code",[s._v("source")]),s._v("命令用于执行一个脚本，通常用于重新加载一个配置文件。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("source")]),s._v(" .bashrc\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("code",[s._v("source")]),s._v("命令最大的特点是在当前 Shell 执行脚本，不像直接执行脚本时，会新建一个子 Shell。所以，"),a("code",[s._v("source")]),s._v("命令执行脚本时，不需要"),a("code",[s._v("export")]),s._v("变量。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/bash")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# test.sh")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$foo")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("上面脚本输出"),a("code",[s._v("$foo")]),s._v("变量的值。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当前 Shell 新建一个变量 foo")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 打印输出 1")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("source")]),s._v(" test.sh\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 打印输出空字符串")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v(" test.sh\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("上面例子中，当前 Shell 的变量"),a("code",[s._v("foo")]),s._v("并没有"),a("code",[s._v("export")]),s._v("，所以直接执行无法读取，但是"),a("code",[s._v("source")]),s._v("执行可以读取。")]),s._v(" "),a("p",[a("code",[s._v("source")]),s._v("命令的另一个用途，是在脚本内部加载外部库。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/bash")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("source")]),s._v(" ./lib.sh\n\nfunction_from_lib\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("上面脚本在内部使用"),a("code",[s._v("source")]),s._v("命令加载了一个外部库，然后就可以在脚本里面，使用这个外部库定义的函数。")]),s._v(" "),a("p",[a("code",[s._v("source")]),s._v("有一个简写形式，可以使用一个点（"),a("code",[s._v(".")]),s._v("）来表示。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" .bashrc\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"别名-alias-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#别名-alias-命令"}},[s._v("#")]),s._v(" 别名，alias 命令")]),s._v(" "),a("p",[a("code",[s._v("alias")]),s._v("命令用来为一个命令指定别名，这样更便于记忆。下面是"),a("code",[s._v("alias")]),s._v("的格式。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("alias")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("NAME")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("DEFINITION\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上面命令中，"),a("code",[s._v("NAME")]),s._v("是别名的名称，"),a("code",[s._v("DEFINITION")]),s._v("是别名对应的原始命令。注意，等号两侧不能有空格，否则会报错。")]),s._v(" "),a("p",[s._v("一个常见的例子是为"),a("code",[s._v("grep")]),s._v("命令起一个"),a("code",[s._v("search")]),s._v("的别名。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("alias")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("search")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("grep\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("code",[s._v("alias")]),s._v("也可以用来为长命令指定一个更短的别名。下面是通过别名定义一个"),a("code",[s._v("today")]),s._v("的命令。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("alias")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("today")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'date +\"%A, %B %-d, %Y\"'")]),s._v("\n$ today\n星期一, 一月 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2020")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("有时为了防止误删除文件，可以指定"),a("code",[s._v("rm")]),s._v("命令的别名。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("alias")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("rm")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'rm -i'")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上面命令指定"),a("code",[s._v("rm")]),s._v("命令是"),a("code",[s._v("rm -i")]),s._v("，每次删除文件之前，都会让用户确认。")]),s._v(" "),a("p",[a("code",[s._v("alias")]),s._v("定义的别名也可以接受参数，参数会直接传入原始命令。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("alias")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("echo")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'echo It says: '")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" hello world\nIt says: hello world\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("上面例子中，别名定义了"),a("code",[s._v("echo")]),s._v("命令的前两个参数，等同于修改了"),a("code",[s._v("echo")]),s._v("命令的默认行为。")]),s._v(" "),a("p",[s._v("指定别名以后，就可以像使用其他命令一样使用别名。一般来说，都会把常用的别名写在"),a("code",[s._v("~/.bashrc")]),s._v("的末尾。另外，只能为命令定义别名，为其他部分（比如很长的路径）定义别名是无效的。")]),s._v(" "),a("p",[s._v("直接调用"),a("code",[s._v("alias")]),s._v("命令，可以显示所有别名。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("alias")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("code",[s._v("unalias")]),s._v("命令可以解除别名。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("unalias")]),s._v(" lt\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"参考链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[s._v("#")]),s._v(" 参考链接")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://linuxconfig.org/how-to-use-getopts-to-parse-a-script-options",target:"_blank",rel:"noopener noreferrer"}},[s._v("How to use getopts to parse a script options"),a("OutboundLink")],1),s._v(", Egidio Docile")])])])}),[],!1,null,null,null);a.default=n.exports}}]);